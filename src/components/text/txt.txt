
//   <div className="flex flex-col items-start justify-center w-full pl-[60px] text-black font-serif">
//                 <ul className="list-disc list-inside w-[93%] ">
//                   {/* Conditional rendering */}
//                   {definition ? (
//                     // If API data is available, display it
//                     <div>
//                       {definition.meanings[0].definitions.map(({definition, example, index}: DefinitionMeaningType) => (
//                         <li key={index} className="mb-3">
//                           {definition}
//                           {example && (
//                             <>
//                               <br />
//                               <strong>Example:</strong> "{example}"
//                             </>
//                           )}
//                         </li>
//                       ))}
//                     </div>
//                   ) : (
//                     // If API data is not available, display a default word
//                     <div>
//                       <h1 className="text-[30px] text-black font-extrabold font-[Poppins]">
//                         Search for a Word
//                       </h1>
//                     </div>
//                   )}
//                 </ul>
//               </div>
// type DictionaryResponseType = {
//   word: string;
//   phonetic: string;
//   phonetics: {
//     audio: string
//   };
//   meanings: {
//     partOfSpeech: string;
//     definitions: { definition: string; example?: string }[];
//   }[];
// } | null;






// Import necessary modules and components
import { useState } from "react";
import { CiSearch } from "react-icons/ci";
import { FaPlay } from "react-icons/fa";
import "../main/web-dictionary.css";
import axios from "axios";
import { DictionaryApi } from "../utilities/DictionaryApi";

// Define the type for the overall dictionary response

type PhoneticType = {
  audio: string;
};

type DefinitionType = {
  partOfSpeech: string;
  definitions: { definition: string; example?: string }[];
};

type DictionaryResponseType = {
  word: string;
  phonetic: string;
  synonyms?: string[];
  sourceUrls?: string[];
  phonetics: PhoneticType[];
  meanings: DefinitionType[];
} | null;

const WebDictionary = () => {
  // State to hold the word to be searched
  const [word, setWord] = useState<string>("");

  //state for loading effect
  const [isLoading, setIsLoading] = useState<boolean>(false);

  //sate for playing audio
  const [audio, setAudio] = useState<string>();
  // const [playAudio, setPlayAudio] = useState<boolean>(false)

  // State to hold the dictionary response
  const [definition, setDefinition] = useState<DictionaryResponseType>(null);

  //state for source
  const [source, setSource] = useState<string>("");

  // Function to handle the API request
  const handleSubmit = () => {
    setIsLoading(true)
    axios
      .get(`${DictionaryApi}${word}`)
      .then((response) => {
        // Handle success
        console.log(response.data, "the main response");
        console.log(response.data[0].word, "the word");
        console.log(response.data[0].phonetic, "the speech soundddd");
        console.log(response.data[0].phonetics[0].audio, "the audio");
        console.log(response.data[0].sourceUrls, "the source");
        console.log(response.data[0].sourceUrls[0], "the source2");
        console.log(response.data[0].meanings, "the array of meanings");
        console.log(response.data[0].meanings[0].synonyms, "the synonyms");
        console.log(response.data[0].meanings[0].definitions, "meaning noun"); // noun meaning
        console.log(response.data[0].meanings[1].definitions, "meaning verb"); // verb meaning
        // setting the definition and audio
        setDefinition(response.data[0]);
        setAudio(response.data[0].phonetics[0].audio);
        setSource(response.data[0].sourceUrls[0]);
      })
      .catch((error) => {
        // Handle error
        console.log(error);
      });
  };

  return (
    <>
      <div className="main-container flex flex-col items-center justify-center bg-white">
        <div className="flex flex-col items-center justify-center w-[60%] mt-[60px]">
          {/* Section one: Header */}
          <div className="first-div flex flex-row items-center justify-between w-[100%] gap-[0px]">
            <div className="flex flex-row items-center justify-center gap-5">
              <img src="/book.jpeg" alt="book" className="h-[55px] w-[55px]" />
              <h1 className="text-black font-extrabold text-[25px]">
                Web Dictionary
              </h1>
            </div>
          </div>

          {/* Section two: Search Input */}
          <div className="w-[100%] flex items-center justify-center relative">
            <input
              type="text"
              value={word}
              onChange={(e) => setWord(e.target.value)}
              placeholder="search for a word....."
              className="custom-placeholder bg-purple-100 mt-10 rounded-[10px] size-[45px] focus:outline-none w-[95%] pl-[25px] text-black font-[poppins]"
              //on pressing enter in the keyboard it should automatically post or send the request to the api
              onKeyPress={(e) => {
                if (e.key === "Enter") {
                  handleSubmit();
                }
              }}
            />
            <CiSearch className="absolute size-[22px] text-purple-500 ml-[650px] mt-10 font-bold" />
          </div>
          {
            isLoading ? (
              <div className="loader"></div> 
            ) : (
                    {/* Section three: Word and Phonetic Display */}
                <div className="flex flex-row items-center justify-between w-[95%] mt-[35px]">
                <div className="flex flex-col items-start justify-center gap-2">
                  <h1 className="text-[30px] text-black font-extrabold font-[Poppins]">
                    {/* Conditional rendering: f the api is available display it else display serch for  word */}
                    {definition ? definition.word : "Search for a Word"}
                  </h1>
                  <p className="text-[16px] text-[#c842f5] font-light">
                    {definition ? definition.phonetic : "Search for a Word"}
                  </p>
                </div>
                <div className="bg-[#c842f550] flex items-center justify-center rounded-[50px] size-[55px] cursor-pointer">
                  {definition ? (
                    <FaPlay className="size-[20px] text-[#c842f5]">
                      <audio src={`${audio}`} controls autoPlay preload="auto" />`
                    </FaPlay>
                  ) : (
                    <FaPlay className="size-[20px] text-[#c842f5]" />
                  )}
                </div>
              </div>

              {/* Section four: Noun Heading */}
              <div className="flex items-center justify-center gap-[10px] w-[100%] mt-5">
                <h5 className="text-black text-[17px] font-bold font-serif">
                  noun
                </h5>
                <hr className="w-[88%] bg-black" />
              </div>

              {/* Section five: Noun Meanings */}
              <div className="flex flex-col items-start justify-center gap-5 mt-7 w-full">
                <h1 className="text-[18px] pl-[23px] font-serif font-medium">
                  Meaning
                </h1>
                <div className="w-full">
                  <div className="flex flex-col items-start justify-center w-full pl-[60px] text-black font-serif">
                    <ul className="list-disc list-inside w-[93%]">
                      {definition ? (
                        definition.meanings[0].definitions.map((item, index) => (
                          <li key={index} className="mb-3">
                            {item.definition}
                            {item.example && (
                              <>
                                <br />
                                <strong>Example:</strong> "{item.example}"
                              </>
                            )}
                          </li>
                        ))
                      ) : (
                        <h1 className="text-[30px] text-black font-extrabold font-[Poppins]">
                          Search for a Word
                        </h1>
                      )}
                    </ul>
                  </div>
                </div>
              </div>

              {/* Section six: Synonyms */}

              <div className="flex flex-row items-start justify-start gap-5 mt-7 w-full font-serif ">
                <h1 className="text-[18px] font-serif font-medium pl-[23px]">
                  Synonyms
                </h1>
                <h1 className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-7 xl:grid-cols-7 text-[18px] font-serif text-[#c842f5] font-normal">
                  {definition &&
                    definition.meanings[0].synonyms?.map(
                      (synonym: string, index: number) => (
                        <div key={index} className="">
                          {synonym}
                        </div>
                      )
                    )}
                </h1>
              </div>

              {/* Section seven: Verb Heading */}
              <div className="flex items-center justify-center gap-[10px] w-[100%] mt-5 font-serif">
                <h5 className="text-black text-[17px] font-bold font-serif">
                  verb
                </h5>
                <hr className="w-[88%] bg-black" />
              </div>

              {/* Section eight: Verb Meanings */}
              <div className="flex flex-col items-start justify-center gap-5 mt-7 w-full">
                <h1 className="text-[18px] pl-[23px] font-serif font-medium">
                  Meaning
                </h1>
                <div className="w-full">
                  <div className="flex flex-col items-start justify-center w-full pl-[60px] text-black font-serif">
                    <ul className="list-disc list-inside w-[93%]">
                      {definition ? (
                        definition.meanings[1].definitions.map((item, index) => (
                          <li key={index} className="mb-3">
                            {item.definition}
                            {item.example && (
                              <span>
                                <br />
                                <strong>Example:</strong> {item.example}
                              </span>
                            )}
                          </li>
                        ))
                      ) : (
                        <h1 className="text-[30px] text-black font-extrabold font-[Poppins]">
                          Search for a Word
                        </h1>
                      )}
                    </ul>
                  </div>
                </div>
              </div>

              {/* Section nine: Footer Divider */}
              <div className="flex items-center justify-center w-[100%] mt-5 font-serif">
                <hr className="w-[88%] bg-black" />
              </div>
              <div className="flex flex-row items-start justify-start mt-5 gap-1 mb-5">
                <h1 className="text-[18px] pl-[23px] font-serif font-medium ">
                  Source:
                </h1>
                <h1 className="text-[18px] pl-[23px] font-serif font-medium ">{source}</h1>
              </div>
      )
      }
      </div>
  </div>
    </>
  );
};

export default WebDictionary;





import { useState } from "react";
import { CiSearch } from "react-icons/ci";
import { FaPlay } from "react-icons/fa";
import "../main/web-dictionary.css";
import axios from "axios";
import { DictionaryApi } from "../utilities/DictionaryApi";

type PhoneticType = {
  audio: string;
};

type DefinitionType = {
  definition: string;
  example?: string;
};

type MeaningType = {
  partOfSpeech: string;
  definitions: DefinitionType[];
  synonyms?: string[];
};

type DictionaryResponseType = {
  word: string;
  phonetic: string;
  sourceUrls?: string[];
  phonetics: PhoneticType[];
  meanings: MeaningType[];
} | null;

type ErrorResponseType = {
  title: string;
  message: string;
  resolution: string;
} | null;

const WebDictionary = () => {
  const [word, setWord] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [audio, setAudio] = useState<string | null>(null);
  const [definition, setDefinition] = useState<DictionaryResponseType>(null);
  const [source, setSource] = useState<string>("");
  const [error, setError] = useState<ErrorResponseType>(null);

  const handleSubmit = () => {
    setIsLoading(true);
    setError(null); // Clear previous error
    setDefinition(null); // Clear previous result

    axios
      .get(`${DictionaryApi}${word}`)
      .then((response) => {
        const data = response.data[0];
        setDefinition(data);
        setAudio(data.phonetics[0]?.audio ?? null);
        setSource(data.sourceUrls[0] ?? "");
        setIsLoading(false);
      })
      .catch((error) => {
        const errorMessage = error.response?.data || {
          title: "Error",
          message: "An error occurred while fetching the data.",
          resolution: "Please try again.",
        };
        setError(errorMessage);
        setIsLoading(false);
      });
  };

  return (
    <div className="main-container flex flex-col items-center justify-center bg-white">
      <div className="flex flex-col items-center justify-center w-[60%] mt-[60px]">
        <div className="first-div flex flex-row items-center justify-between w-[100%] gap-[0px]">
          <div className="flex flex-row items-center justify-center gap-5">
            <img src="/book.jpeg" alt="book" className="h-[55px] w-[55px]" />
            <h1 className="text-black font-extrabold text-[25px]">
              Web Dictionary
            </h1>
          </div>
        </div>

        <div className="w-[100%] flex items-center justify-center relative">
          <input
            type="text"
            value={word}
            onChange={(e) => setWord(e.target.value)}
            placeholder="Search for a word..."
            className="custom-placeholder bg-purple-100 mt-10 rounded-[10px] size-[45px] focus:outline-none w-[95%] pl-[25px] text-black font-[Poppins]"
            onKeyPress={(e) => {
              if (e.key === "Enter") {
                handleSubmit();
              }
            }}
          />
          <CiSearch className="absolute size-[22px] text-purple-500 ml-[650px] mt-10 font-bold" />
        </div>

        {isLoading ? (
          <div className="w-screen h-[80vh] bg-white flex items-center justify-center text-center">
            <div className="loader"></div>
          </div>
        ) : error ? (
          <div className="w-screen h-[80vh] bg-white flex flex-col items-center justify-start mt-[120px] text-center gap-4">
            <h1 className="text-[30px] text-red-500 font-serif">
              {error.title}
            </h1>
            <p className="text-[20px] font-serif text-black">{error.message}</p>
            <p className="text-[20px] font-serif text-black">{error.resolution}</p>
          </div>
        ) : (
          definition && (
            <>
              <div className="flex flex-row items-center justify-between w-[95%] mt-[35px]">
                <div className="flex flex-col items-start justify-center gap-2">
                  <h1 className="text-[30px] text-black font-extrabold font-[Poppins]">
                    {definition.word}
                  </h1>
                  <p className="text-[16px] text-[#c842f5] font-light">
                    {definition.phonetic}
                  </p>
                </div>
                {audio && (
                  <div
                    className="bg-[#c842f550] flex items-center justify-center rounded-[50px] size-[55px] cursor-pointer"
                    onClick={() => new Audio(audio).play()}
                  >
                    <FaPlay className="size-[20px] text-[#c842f5]" />
                  </div>
                )}
              </div>

              {definition.meanings.map((meaning, index) => (
                <div key={index} className="w-full mt-7">
                  <div className="flex items-center justify-center gap-[10px] w-[100%] font-serif">
                    <h5 className="text-black text-[17px] font-bold">
                      {meaning.partOfSpeech}
                    </h5>
                    <hr className="w-[88%] bg-black" />
                  </div>
                  <div className="flex flex-col items-start justify-center gap-5 mt-5 w-full">
                    <h1 className="text-[18px] pl-[23px] font-serif font-medium">
                      Meaning
                    </h1>
                    <div className="w-full pl-[60px] text-black font-serif">
                      <ul className="list-disc list-inside w-[93%]">
                        {meaning.definitions.map((item, index) => (
                          <li key={index} className="mb-3">
                            {item.definition}
                            {item.example && (
                              <>
                                <br />
                                <strong>Example:</strong> "{item.example}"
                              </>
                            )}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  {meaning.synonyms && meaning.synonyms.length > 0 && (
                    <div className="flex flex-row items-start justify-start gap-5 mt-7 w-full font-serif">
                      <h1 className="text-[18px] font-serif font-medium pl-[23px]">
                        Synonyms
                      </h1>
                      <div className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-7 xl:grid-cols-7 text-[18px] font-serif text-[#c842f5] font-normal">
                        {meaning.synonyms.map((synonym, index) => (
                          <div key={index}>{synonym}</div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}

              <div className="flex items-center justify-center w-[100%] mt-5 font-serif">
                <hr className="w-[88%] bg-black" />
              </div>
              {source && (
                <div className="flex flex-row items-start justify-start mt-5 gap-1 mb-5">
                  <h1 className="text-[18px] pl-[23px] font-serif font-medium">
                    Source:
                  </h1>
                  <a
                    href={source}
                    className="text-[18px] pl-[23px] font-serif font-medium"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {source}
                  </a>
                </div>
              )}
            </>
          )
        )}
      </div>
    </div>
  );
};

export default WebDictionary;
